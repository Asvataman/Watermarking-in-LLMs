import streamlit as st
from typing import Dict

class DetectionPanel:
    """Standalone detection panel for analyzing text for watermarks."""
    
    def __init__(self, detector):
        """
        Initialize the detection panel.
        
        Args:
            detector: WatermarkDetector instance
        """
        self.detector = detector
    
    def render(self):
        """Render the detection panel."""
        st.markdown("## Watermark Detection Tool")
        st.markdown(
            "Use this tool to analyze any text and check if it contains a watermark. "
            "Paste text from any source (including other language models) to analyze it."
        )
        
        text_to_analyze = st.text_area(
            "Paste text to analyze for watermarks", 
            height=200, 
            help="Enter text to check for watermarks"
        )
        
        if st.button("Analyze Text"):
            if not text_to_analyze:
                st.warning("Please enter some text to analyze.")
                return
                
            with st.spinner("Analyzing..."):
                # Run detection
                detection_result = self.detector.detect(text_to_analyze)
                
                # Display results
                cols = st.columns(2)
                
                with cols[0]:
                    st.markdown("### Detection Results")
                    st.markdown(f"**Is Watermarked:** {'Yes' if detection_result['is_watermarked'] else 'No'}")
                    st.markdown(f"**Z-Score:** {detection_result['z_score']:.2f}")
                    st.markdown(f"**P-Value:** {detection_result['p_value']:.8f}")
                    st.markdown(f"**Green Tokens:** {detection_result['green_token_count']} / {detection_result['total_tokens']} "
                              f"({detection_result['green_token_count']/detection_result['total_tokens']*100:.1f}%)")
                    st.markdown(f"**Expected Green Tokens:** {detection_result['expected_green_count']:.1f}")
                
                with cols[1]:
                    if detection_result["visualization"]:
                        st.image(f"data:image/png;base64,{detection_result['visualization']}")
                
                # Display highlighted text
                st.markdown("### Highlighted Text (Green Tokens)")
                highlighted_text = self.detector.get_highlighted_text(text_to_analyze, detection_result)
                st.markdown(highlighted_text, unsafe_allow_html=True)
                
                # Interpretation
                st.markdown("### Interpretation")
                if detection_result["is_watermarked"]:
                    st.success(
                        "This text contains a statistically significant pattern consistent with our watermark. "
                        f"The z-score of {detection_result['z_score']:.2f} exceeds our detection threshold, "
                        f"with a p-value of {detection_result['p_value']:.8f}. "
                        "This suggests the text was likely generated by a watermarked language model."
                    )
                else:
                    if detection_result["z_score"] > 2.0:
                        st.info(
                            f"This text shows some pattern (z-score: {detection_result['z_score']:.2f}), but it's "
                            "below our detection threshold. This might be human-written text with a coincidental pattern, "
                            "or watermarked text that has been heavily edited."
                        )
                    else:
                        st.info(
                            "No watermark detected. This text is likely human-written or generated "
                            "by a model without this specific watermarking scheme."
                        )